##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2023/07/14
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:		load, display, reload, refresh
#   Modulefiles:    uniq, foo
#   Sub-Command:
#
#   Comment:	%C{
#           Test unique_name_loaded configuration option
#		}C%
#
##############################################################################

set mp $modpath.4
set mpre $modpathre.4
setenv_path_var MODULEPATH $mp

setenv_var MODULES_UNIQUE_NAME_LOADED 1

setenv_var MODULES_IMPLICIT_DEFAULT 1


set ans [list]
lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq]
lappend ans [list set _LMFILES_ $mp/uniq/1.0]
lappend ans [list set LOADEDMODULES uniq/1.0]
testouterr_cmd sh {load uniq/1.0} $ans {}

setenv_loaded_module [list uniq/1.0] [list $mp/uniq/1.0]
setenv_var __MODULES_LMCONFLICT uniq/1.0&uniq

testouterr_cmd sh {load uniq/1.0} OK {}

if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/2.0&uniq]
    lappend ans [list set _LMFILES_ $mp/uniq/2.0]
    lappend ans [list set LOADEDMODULES uniq/2.0]
    set tserr [msg_top_load uniq/2.0 uniq/1.0 {} {}]
} else {
    set ans ERR
    set tserr [msg_load uniq/2.0 [err_conflict uniq/1.0]]
}
testouterr_cmd sh {load uniq/2.0} $ans $tserr

skip_if_quick_mode

if {![is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq:uniq/2.0&uniq]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0:$mp/uniq/2.0]
    lappend ans [list set LOADEDMODULES uniq/1.0:uniq/2.0]
    set tserr [msg_load uniq/2.0 [err_conlof uniq/1.0]]
}
testouterr_cmd sh {load -f uniq/2.0} $ans $tserr

setenv_loaded_module [list uniq/1.0 uniq/2.0] [list $mp/uniq/1.0 $mp/uniq/2.0]
setenv_var __MODULES_LMCONFLICT uniq/1.0&uniq:uniq/2.0&uniq

if {[is_conf_enabled autohandling conflictunload]} {
    #FIXME: should be able to unload all conflicting without error
    set tserr [msg_load uniq/2.0 [err_conloi uniq/3.0]]
    append tserr \n\n[msg_unload uniq/1.0 [err_depre uniq/2.0]]
    append tserr \n\n[msg_load uniq/3.0 [err_conun uniq/1.0] [err_conlo uniq/1.0]]
} else {
    set tserr [msg_load uniq/3.0 [err_conflict uniq/1.0 uniq/2.0]]
}
testouterr_cmd sh {load uniq/3.0} ERR $tserr

if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/3.0&uniq]
    lappend ans [list set _LMFILES_ $mp/uniq/3.0]
    lappend ans [list set LOADEDMODULES uniq/3.0]
    #FIXME: should not see uniq/2.0 as a dependent reload
    set tserr [msg_load uniq/2.0 [err_conloif uniq/3.0]]
    append tserr \n\n[msg_top_load uniq/3.0 {uniq/1.0 uniq/2.0} {} {uniq/2.0}]
} else {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq:uniq/2.0&uniq:uniq/3.0&uniq]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0:$mp/uniq/2.0:$mp/uniq/3.0]
    lappend ans [list set LOADEDMODULES uniq/1.0:uniq/2.0:uniq/3.0]
    set tserr [msg_load uniq/3.0 [err_conlof uniq/1.0 uniq/2.0]]
}
testouterr_cmd sh {load -f uniq/3.0} $ans $tserr


# deep module name
unsetenv_loaded_module
unsetenv_var __MODULES_LMCONFLICT

setenv_var MODULES_ADVANCED_VERSION_SPEC 0
set ans [list]
lappend ans [list set __MODULES_LMCONFLICT uniqsub/sub2/4.0&uniqsub]
lappend ans [list set _LMFILES_ $mp/uniqsub/sub2/4.0]
lappend ans [list set LOADEDMODULES uniqsub/sub2/4.0]
testouterr_cmd sh {load uniqsub} $ans {}
testouterr_cmd sh {load uniqsub/sub2} $ans {}

setenv_loaded_module [list uniqsub/sub1/1.0] [list $mp/uniqsub/sub1/1.0]
setenv_var __MODULES_LMCONFLICT uniqsub/sub1/1.0&uniqsub

if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniqsub/sub2/4.0&uniqsub]
    lappend ans [list set _LMFILES_ $mp/uniqsub/sub2/4.0]
    lappend ans [list set LOADEDMODULES uniqsub/sub2/4.0]
    set tserr [msg_top_load uniqsub/sub2/4.0 uniqsub/sub1/1.0 {} {}]
} else {
    set ans ERR
    set tserr [msg_load uniqsub/sub2/4.0 [err_conflict uniqsub/sub1/1.0]]
}
testouterr_cmd sh {load uniqsub} $ans $tserr

if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniqsub/sub1/2.0&uniqsub]
    lappend ans [list set _LMFILES_ $mp/uniqsub/sub1/2.0]
    lappend ans [list set LOADEDMODULES uniqsub/sub1/2.0]
    set tserr [msg_top_load uniqsub/sub1/2.0 uniqsub/sub1/1.0 {} {}]
} else {
    set ans ERR
    set tserr [msg_load uniqsub/sub1/2.0 [err_conflict uniqsub/sub1/1.0]]
}
testouterr_cmd sh {load uniqsub/sub1} $ans $tserr
testouterr_cmd sh {load uniqsub/sub1/2.0} $ans $tserr

# loading module with alias
setenv_var TESTSUITE_UNIQ_NAME alias1
unsetenv_loaded_module
unsetenv_var __MODULES_LMCONFLICT
unsetenv_var MODULES_ADVANCED_VERSION_SPEC

set ans [list]
lappend ans [list set __MODULES_LMALTNAME uniq/1.0&al|foo/alias]
lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq&foo]
lappend ans [list set _LMFILES_ $mp/uniq/1.0]
lappend ans [list set LOADEDMODULES uniq/1.0]
testouterr_cmd sh {load uniq/1.0} $ans {}

# loading module alias matches already loaded module
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
if {[is_conf_enabled autohandling conflictunload]} {
    set tserr [msg_top_load uniq/1.0 foo/1.0 {} {}]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr

# loading module alias matches already loaded module alias
setenv_var TESTSUITE_UNIQ_NAME alias2
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
setenv_var __MODULES_LMALTNAME foo/1.0&bar/alias
if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq&bar]
    lappend ans [list set __MODULES_LMALTNAME uniq/1.0&al|bar/alias]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0]
    lappend ans [list set LOADEDMODULES uniq/1.0]
    set tserr [msg_top_load uniq/1.0 foo/1.0 {} {}]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr


# loading module with deep alias
setenv_var TESTSUITE_UNIQ_NAME alias3
unsetenv_loaded_module
unsetenv_var __MODULES_LMCONFLICT
unsetenv_var __MODULES_LMALTNAME

set ans [list]
lappend ans [list set __MODULES_LMALTNAME uniq/1.0&al|foo/sub/alias]
lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq&foo]
lappend ans [list set _LMFILES_ $mp/uniq/1.0]
lappend ans [list set LOADEDMODULES uniq/1.0]
testouterr_cmd sh {load uniq/1.0} $ans {}

# loading module deep alias matches already loaded module
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
if {[is_conf_enabled autohandling conflictunload]} {
    set tserr [msg_top_load uniq/1.0 foo/1.0 {} {}]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr

# loading module deep alias matches already loaded module alias
setenv_var TESTSUITE_UNIQ_NAME alias4
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
setenv_var __MODULES_LMALTNAME foo/1.0&bar/alias
if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq&bar]
    lappend ans [list set __MODULES_LMALTNAME uniq/1.0&al|bar/sub/alias]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0]
    lappend ans [list set LOADEDMODULES uniq/1.0]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr


# alias loaded matches loading module
unsetenv_var TESTSUITE_UNIQ_NAME
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
setenv_var __MODULES_LMALTNAME foo/1.0&uniq/alias
if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq]
    lappend ans [list unset __MODULES_LMALTNAME]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0]
    lappend ans [list set LOADEDMODULES uniq/1.0]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr

# alias loaded matches loading module alias
setenv_var TESTSUITE_UNIQ_NAME alias2
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
setenv_var __MODULES_LMALTNAME foo/1.0&bar/fooalias
if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq&bar]
    lappend ans [list set __MODULES_LMALTNAME uniq/1.0&al|bar/alias]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0]
    lappend ans [list set LOADEDMODULES uniq/1.0]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr


# deep alias loaded matches loading module
unsetenv_var TESTSUITE_UNIQ_NAME
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
setenv_var __MODULES_LMALTNAME foo/1.0&uniq/sub/alias
if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq]
    lappend ans [list unset __MODULES_LMALTNAME]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0]
    lappend ans [list set LOADEDMODULES uniq/1.0]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr

# deep alias loaded matches loading module deep alias
setenv_var TESTSUITE_UNIQ_NAME alias4
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
setenv_var __MODULES_LMALTNAME foo/1.0&bar/sub/fooalias
if {[is_conf_enabled autohandling conflictunload]} {
    set ans [list]
    lappend ans [list set __MODULES_LMCONFLICT uniq/1.0&uniq&bar]
    lappend ans [list set __MODULES_LMALTNAME uniq/1.0&al|bar/sub/alias]
    lappend ans [list set _LMFILES_ $mp/uniq/1.0]
    lappend ans [list set LOADEDMODULES uniq/1.0]
} else {
    set ans ERR
    set tserr [msg_load uniq/1.0 [err_conflict foo/1.0]]
}
testouterr_cmd sh {load uniq/1.0} $ans $tserr


# test module with similar but different name
unsetenv_var TESTSUITE_UNIQ_NAME
setenv_loaded_module [list foo/1.0] [list $mp/foo/1.0]
setenv_var __MODULES_LMCONFLICT foo/1.0&foo
unsetenv_var __MODULES_LMALTNAME
set ans [list]
lappend ans [list set __MODULES_LMCONFLICT foo/1.0&foo:tfoo/1.0&tfoo]
lappend ans [list set _LMFILES_ $mp/foo/1.0:$mp/tfoo/1.0]
lappend ans [list set LOADEDMODULES foo/1.0:tfoo/1.0]
testouterr_cmd sh {load tfoo/1.0} $ans {}

setenv_var MODULES_ADVANCED_VERSION_SPEC 0
setenv_loaded_module [list tfoo/1.0] [list $mp/tfoo/1.0]
setenv_var __MODULES_LMCONFLICT tfoo/1.0&tfoo
set ans [list]
lappend ans [list set __MODULES_LMCONFLICT tfoo/1.0&tfoo:foo/1.0&foo]
lappend ans [list set _LMFILES_ $mp/tfoo/1.0:$mp/foo/1.0]
lappend ans [list set LOADEDMODULES tfoo/1.0:foo/1.0]
testouterr_cmd sh {load foo/1.0} $ans {}
unsetenv_var MODULES_ADVANCED_VERSION_SPEC


# display (nothing should appear)
unsetenv_loaded_module
unsetenv_var __MODULES_LMCONFLICT
unsetenv_var __MODULES_LMALTNAME
unsetenv_var TESTSUITE_UNIQ_NAME

set tserr "$modlin
$mpre/uniq/1.0:

$modlin"
testouterr_cmd_re sh {display uniq/1.0} OK $tserr


# reload (when conflict has been forced)
setenv_var TESTSUITE_UNIQ_NAME reload1
setenv_loaded_module [list uniq/1.0 uniq/2.0] [list $mp/uniq/1.0 $mp/uniq/2.0]
setenv_var __MODULES_LMCONFLICT uniq/1.0&uniq:uniq/2.0&uniq
set tserr [msg_load uniq/2.0 [err_conlo uniq/1.0]]
testouterr_cmd sh {reload} ERR $err_unsatreload
testouterr_cmd sh {reload -f} ERR $err_unsatreload


# refresh (when conflict has been forced)
setenv_var TESTSUITE_UNIQ_NAME refresh1
setenv_loaded_module [list uniq/1.0 uniq/2.0] [list $mp/uniq/1.0 $mp/uniq/2.0]
setenv_var __MODULES_LMREFRESH uniq/1.0:uniq/2.0
setenv_var __MODULES_LMCONFLICT uniq/1.0&uniq:uniq/2.0&uniq
set ans [list]
lappend ans [list alias uniq 2]
testouterr_cmd sh {refresh} $ans {}


#
#  Cleanup
#

reset_test_env
